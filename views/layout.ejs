<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'Pegaso' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.6/popper.min.js"></script>

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/materialize.css">
    <link rel="stylesheet" href="/styles/menu.css">
    <!--STYLES END-->
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.6/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/1.3.4/vue-resource.min.js"></script>
    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/Ajquery-3.2.1.min.js"></script>
    <script src="/js/dependencies/materialize.js"></script>
    <script src="/js/dependencies/menu.js"></script>
    <!--SCRIPTS END-->
  </head>

  <body>
      <!-- Dropdown Structure -->

      <ul id="dropdown1" class="dropdown-content">
  <li><a href="#!">Aministrar cupon</a></li>
  <li><a href="/ticketsAdd">Añadir cupon</a></li>
  <!--<li class="divider"></li>-->
  <li><a href="#!">three</a></li>
</ul>

<nav>
  <div class="nav-wrapper">
    <a href="/home" class="brand-logo">MegaCupones</a>
    <ul class="right hide-on-med-and-down">
       <li><a class="dropdown-button" href="#!" data-activates="dropdown1">Cupones</a></li>
       <li><a href="/login">Login</a></li>
      
      <!-- Dropdown Trigger -->
     
    </ul>
  </div>

  
</nav>


<br />
<div class="container">

  <%- body %>
</div>
<br />
      
       
     

      
        
    
       
<footer class="page-footer">
          <div class="container">
            <div class="row">
              <div class="col l6 s12">
                <h5 class="white-text">MegaCupones Inc.</h5>
                <p class="grey-text text-lighten-4">
                  Esta es una web deditaca a prestar un servicio para el mundo. Gracias por entrar
                </p>
              </div>
              <div class="col l4 offset-l2 s12">
                <h5 class="white-text">Lugares interesantes</h5>
                <ul>
                  <li><a class="grey-text text-lighten-3" href="#!">Facebook</a></li>
                  <li><a class="grey-text text-lighten-3" href="#!">Twitwe</a></li>
                  
                </ul>
              </div>
            </div>
          </div>
          <div class="footer-copyright">
            <div class="container">
            © 2017 Parangos Company
            <a class="grey-text text-lighten-4 right" href="#!">Gracias <3 </a>
            </div>
          </div>
        </footer>
      
        
      
      
    

    



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    
  </body>
</html>
